// Code generated by MockGen. DO NOT EDIT.
// Source: src/core/domain/userdm/user_repository.go

// Package mock_userdm is a generated GoMock package.
package mock_userdm

import (
	context "context"
	reflect "reflect"

	userdm "github.com/FUJI0130/curriculum/src/core/domain/userdm"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindByUserName mocks base method.
func (m *MockUserRepository) FindByUserName(ctx context.Context, name string) (*userdm.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserName", ctx, name)
	ret0, _ := ret[0].(*userdm.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserName indicates an expected call of FindByUserName.
func (mr *MockUserRepositoryMockRecorder) FindByUserName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserName", reflect.TypeOf((*MockUserRepository)(nil).FindByUserName), ctx, name)
}

// FindByUserNames mocks base method.
func (m *MockUserRepository) FindByUserNames(ctx context.Context, names []string) (map[string]*userdm.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserNames", ctx, names)
	ret0, _ := ret[0].(map[string]*userdm.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserNames indicates an expected call of FindByUserNames.
func (mr *MockUserRepositoryMockRecorder) FindByUserNames(ctx, names interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserNames", reflect.TypeOf((*MockUserRepository)(nil).FindByUserNames), ctx, names)
}

// Store mocks base method.
func (m *MockUserRepository) Store(ctx context.Context, userdomain *userdm.UserDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, userdomain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockUserRepositoryMockRecorder) Store(ctx, userdomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUserRepository)(nil).Store), ctx, userdomain)
}
