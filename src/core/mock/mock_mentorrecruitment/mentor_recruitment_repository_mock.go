// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/FUJI0130/curriculum/src/core/domain/mentorrecruitmentdm (interfaces: MentorRecruitmentRepository)

// Package mock_mentorrecruitment is a generated GoMock package.
package mock_mentorrecruitment

import (
	context "context"
	categorydm "github.com/FUJI0130/curriculum/src/core/domain/categorydm"
	mentorrecruitmentdm "github.com/FUJI0130/curriculum/src/core/domain/mentorrecruitmentdm"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMentorRecruitmentRepository is a mock of MentorRecruitmentRepository interface
type MockMentorRecruitmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMentorRecruitmentRepositoryMockRecorder
}

// MockMentorRecruitmentRepositoryMockRecorder is the mock recorder for MockMentorRecruitmentRepository
type MockMentorRecruitmentRepositoryMockRecorder struct {
	mock *MockMentorRecruitmentRepository
}

// NewMockMentorRecruitmentRepository creates a new mock instance
func NewMockMentorRecruitmentRepository(ctrl *gomock.Controller) *MockMentorRecruitmentRepository {
	mock := &MockMentorRecruitmentRepository{ctrl: ctrl}
	mock.recorder = &MockMentorRecruitmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMentorRecruitmentRepository) EXPECT() *MockMentorRecruitmentRepositoryMockRecorder {
	return m.recorder
}

// FindByCategoryID mocks base method
func (m *MockMentorRecruitmentRepository) FindByCategoryID(arg0 context.Context, arg1 categorydm.CategoryID) ([]*mentorrecruitmentdm.MentorRecruitment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCategoryID", arg0, arg1)
	ret0, _ := ret[0].([]*mentorrecruitmentdm.MentorRecruitment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCategoryID indicates an expected call of FindByCategoryID
func (mr *MockMentorRecruitmentRepositoryMockRecorder) FindByCategoryID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCategoryID", reflect.TypeOf((*MockMentorRecruitmentRepository)(nil).FindByCategoryID), arg0, arg1)
}

// FindByID mocks base method
func (m *MockMentorRecruitmentRepository) FindByID(arg0 context.Context, arg1 mentorrecruitmentdm.MentorRecruitmentID) (*mentorrecruitmentdm.MentorRecruitment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*mentorrecruitmentdm.MentorRecruitment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockMentorRecruitmentRepositoryMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockMentorRecruitmentRepository)(nil).FindByID), arg0, arg1)
}

// Store mocks base method
func (m *MockMentorRecruitmentRepository) Store(arg0 context.Context, arg1 *mentorrecruitmentdm.MentorRecruitment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockMentorRecruitmentRepositoryMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockMentorRecruitmentRepository)(nil).Store), arg0, arg1)
}
