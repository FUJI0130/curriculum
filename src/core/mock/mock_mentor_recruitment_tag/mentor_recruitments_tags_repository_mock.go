// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/FUJI0130/curriculum/src/core/domain/mentorrecruitmentdm (interfaces: MentorRecruitmentsTagsRepository)

// Package mock_mentor_recruitment_tag is a generated GoMock package.
package mock_mentor_recruitment_tag

import (
	context "context"
	mentorrecruitmentdm "github.com/FUJI0130/curriculum/src/core/domain/mentorrecruitmentdm"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMentorRecruitmentsTagsRepository is a mock of MentorRecruitmentsTagsRepository interface
type MockMentorRecruitmentsTagsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMentorRecruitmentsTagsRepositoryMockRecorder
}

// MockMentorRecruitmentsTagsRepositoryMockRecorder is the mock recorder for MockMentorRecruitmentsTagsRepository
type MockMentorRecruitmentsTagsRepositoryMockRecorder struct {
	mock *MockMentorRecruitmentsTagsRepository
}

// NewMockMentorRecruitmentsTagsRepository creates a new mock instance
func NewMockMentorRecruitmentsTagsRepository(ctrl *gomock.Controller) *MockMentorRecruitmentsTagsRepository {
	mock := &MockMentorRecruitmentsTagsRepository{ctrl: ctrl}
	mock.recorder = &MockMentorRecruitmentsTagsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMentorRecruitmentsTagsRepository) EXPECT() *MockMentorRecruitmentsTagsRepositoryMockRecorder {
	return m.recorder
}

// FindByMentorRecruitmentID mocks base method
func (m *MockMentorRecruitmentsTagsRepository) FindByMentorRecruitmentID(arg0 context.Context, arg1 mentorrecruitmentdm.MentorRecruitmentID) ([]*mentorrecruitmentdm.MentorRecruitmentTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMentorRecruitmentID", arg0, arg1)
	ret0, _ := ret[0].([]*mentorrecruitmentdm.MentorRecruitmentTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMentorRecruitmentID indicates an expected call of FindByMentorRecruitmentID
func (mr *MockMentorRecruitmentsTagsRepositoryMockRecorder) FindByMentorRecruitmentID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMentorRecruitmentID", reflect.TypeOf((*MockMentorRecruitmentsTagsRepository)(nil).FindByMentorRecruitmentID), arg0, arg1)
}

// Store mocks base method
func (m *MockMentorRecruitmentsTagsRepository) Store(arg0 context.Context, arg1 *mentorrecruitmentdm.MentorRecruitmentTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockMentorRecruitmentsTagsRepositoryMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockMentorRecruitmentsTagsRepository)(nil).Store), arg0, arg1)
}
