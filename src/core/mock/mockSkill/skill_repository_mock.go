// Code generated by MockGen. DO NOT EDIT.
// Source: src/core/domain/userdm/skill_repository.go

// Package mockSkill is a generated GoMock package.
package mockSkill

import (
	context "context"
	reflect "reflect"

	userdm "github.com/FUJI0130/curriculum/src/core/domain/userdm"
	gomock "github.com/golang/mock/gomock"
)

// MockSkillRepository is a mock of SkillRepository interface.
type MockSkillRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSkillRepositoryMockRecorder
}

// MockSkillRepositoryMockRecorder is the mock recorder for MockSkillRepository.
type MockSkillRepositoryMockRecorder struct {
	mock *MockSkillRepository
}

// NewMockSkillRepository creates a new mock instance.
func NewMockSkillRepository(ctrl *gomock.Controller) *MockSkillRepository {
	mock := &MockSkillRepository{ctrl: ctrl}
	mock.recorder = &MockSkillRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSkillRepository) EXPECT() *MockSkillRepositoryMockRecorder {
	return m.recorder
}

// FindByUserID mocks base method.
func (m *MockSkillRepository) FindByUserID(ctx context.Context, userID string) ([]*userdm.Skills, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].([]*userdm.Skills)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockSkillRepositoryMockRecorder) FindByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockSkillRepository)(nil).FindByUserID), ctx, userID)
}

// Store mocks base method.
func (m *MockSkillRepository) Store(ctx context.Context, skill []*userdm.Skills) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, skill)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockSkillRepositoryMockRecorder) Store(ctx, skill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockSkillRepository)(nil).Store), ctx, skill)
}
