// Code generated by MockGen. DO NOT EDIT.
// Source: src/core/domain/userdm/exist_by_name_domain_service.go

// Package mock_userdm is a generated GoMock package.
package mock_userdm

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExistByNameDomainService is a mock of ExistByNameDomainService interface.
type MockExistByNameDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockExistByNameDomainServiceMockRecorder
}

// MockExistByNameDomainServiceMockRecorder is the mock recorder for MockExistByNameDomainService.
type MockExistByNameDomainServiceMockRecorder struct {
	mock *MockExistByNameDomainService
}

// NewMockExistByNameDomainService creates a new mock instance.
func NewMockExistByNameDomainService(ctrl *gomock.Controller) *MockExistByNameDomainService {
	mock := &MockExistByNameDomainService{ctrl: ctrl}
	mock.recorder = &MockExistByNameDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExistByNameDomainService) EXPECT() *MockExistByNameDomainServiceMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockExistByNameDomainService) Exec(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockExistByNameDomainServiceMockRecorder) Exec(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockExistByNameDomainService)(nil).Exec), ctx, name)
}
