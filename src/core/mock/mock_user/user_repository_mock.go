// Code generated by MockGen. DO NOT EDIT.
// Source: src/core/domain/userdm/user_repository.go

// Package mock_userdm is a generated GoMock package.
package mock_userdm

import (
	context "context"
	reflect "reflect"

	userdm "github.com/FUJI0130/curriculum/src/core/domain/userdm"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindByEmail mocks base method.
func (m *MockUserRepository) FindByEmail(ctx context.Context, email string) (*userdm.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*userdm.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryMockRecorder) FindByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindByEmail), ctx, email)
}

// FindByUserID mocks base method.
func (m *MockUserRepository) FindByUserID(ctx context.Context, userID string) (*userdm.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].(*userdm.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockUserRepositoryMockRecorder) FindByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockUserRepository)(nil).FindByUserID), ctx, userID)
}

// FindByUserName mocks base method.
func (m *MockUserRepository) FindByUserName(ctx context.Context, name string) (*userdm.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserName", ctx, name)
	ret0, _ := ret[0].(*userdm.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserName indicates an expected call of FindByUserName.
func (mr *MockUserRepositoryMockRecorder) FindByUserName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserName", reflect.TypeOf((*MockUserRepository)(nil).FindByUserName), ctx, name)
}

// FindByUserNames mocks base method.
func (m *MockUserRepository) FindByUserNames(ctx context.Context, names []string) (map[string]*userdm.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserNames", ctx, names)
	ret0, _ := ret[0].(map[string]*userdm.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserNames indicates an expected call of FindByUserNames.
func (mr *MockUserRepositoryMockRecorder) FindByUserNames(ctx, names interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserNames", reflect.TypeOf((*MockUserRepository)(nil).FindByUserNames), ctx, names)
}

// FindCareersByUserID mocks base method.
func (m *MockUserRepository) FindCareersByUserID(ctx context.Context, userID string) ([]userdm.Career, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCareersByUserID", ctx, userID)
	ret0, _ := ret[0].([]userdm.Career)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCareersByUserID indicates an expected call of FindCareersByUserID.
func (mr *MockUserRepositoryMockRecorder) FindCareersByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCareersByUserID", reflect.TypeOf((*MockUserRepository)(nil).FindCareersByUserID), ctx, userID)
}

// FindSkillsByUserID mocks base method.
func (m *MockUserRepository) FindSkillsByUserID(ctx context.Context, userID string) ([]userdm.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSkillsByUserID", ctx, userID)
	ret0, _ := ret[0].([]userdm.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSkillsByUserID indicates an expected call of FindSkillsByUserID.
func (mr *MockUserRepositoryMockRecorder) FindSkillsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSkillsByUserID", reflect.TypeOf((*MockUserRepository)(nil).FindSkillsByUserID), ctx, userID)
}

// Store mocks base method.
func (m *MockUserRepository) Store(ctx context.Context, userdomain *userdm.UserDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, userdomain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockUserRepositoryMockRecorder) Store(ctx, userdomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUserRepository)(nil).Store), ctx, userdomain)
}

// StoreCareer mocks base method.
func (m *MockUserRepository) StoreCareer(ctx context.Context, career *userdm.Career) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCareer", ctx, career)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCareer indicates an expected call of StoreCareer.
func (mr *MockUserRepositoryMockRecorder) StoreCareer(ctx, career interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCareer", reflect.TypeOf((*MockUserRepository)(nil).StoreCareer), ctx, career)
}

// StoreSkill mocks base method.
func (m *MockUserRepository) StoreSkill(ctx context.Context, skill *userdm.Skill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSkill", ctx, skill)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSkill indicates an expected call of StoreSkill.
func (mr *MockUserRepositoryMockRecorder) StoreSkill(ctx, skill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSkill", reflect.TypeOf((*MockUserRepository)(nil).StoreSkill), ctx, skill)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(ctx context.Context, user *userdm.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), ctx, user)
}
