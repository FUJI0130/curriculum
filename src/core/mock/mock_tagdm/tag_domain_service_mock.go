// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/FUJI0130/curriculum/src/core/domain/tagdm (interfaces: TagDomainService)

// Package mock_tagdm is a generated GoMock package.
package mock_tagdm

import (
	context "context"
	tagdm "github.com/FUJI0130/curriculum/src/core/domain/tagdm"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTagDomainService is a mock of TagDomainService interface
type MockTagDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockTagDomainServiceMockRecorder
}

// MockTagDomainServiceMockRecorder is the mock recorder for MockTagDomainService
type MockTagDomainServiceMockRecorder struct {
	mock *MockTagDomainService
}

// NewMockTagDomainService creates a new mock instance
func NewMockTagDomainService(ctrl *gomock.Controller) *MockTagDomainService {
	mock := &MockTagDomainService{ctrl: ctrl}
	mock.recorder = &MockTagDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTagDomainService) EXPECT() *MockTagDomainServiceMockRecorder {
	return m.recorder
}

// ProcessTag mocks base method
func (m *MockTagDomainService) ProcessTag(arg0 context.Context, arg1, arg2 string) (*tagdm.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(*tagdm.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessTag indicates an expected call of ProcessTag
func (mr *MockTagDomainServiceMockRecorder) ProcessTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTag", reflect.TypeOf((*MockTagDomainService)(nil).ProcessTag), arg0, arg1, arg2)
}
